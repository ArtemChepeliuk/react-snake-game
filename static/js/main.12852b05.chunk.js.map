{"version":3,"sources":["Snake.js","Food.js","App.js","serviceWorker.js","index.js"],"names":["Snake","props","react_default","a","createElement","snakeDots","map","dot","i","style","left","concat","top","className","key","Food","getRandomCoordinats","Math","floor","random","initialState","food","speed","direction","App","state","onKeyDown","e","window","event","keyCode","_this","setState","moveSnake","dots","Object","toConsumableArray","head","length","push","shift","setInterval","this","document","onkeydown","checkIfOutOfBorders","checkIfColapsed","checkIfEat","onGameOver","_this2","snake","pop","forEach","enlargeSnake","increaseSpeed","newSnake","unshift","alert","Component","Boolean","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.12852b05.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default (props) => {\r\n  return(\r\n    <div>\r\n      {props.snakeDots.map((dot, i) => {\r\n        const style = {\r\n          left: `${dot[0]}%`,\r\n          top: `${dot[1]}%`,\r\n        }\r\n        return (\r\n          <div className='snake-dot' key={i} style={style}> </div>\r\n        )\r\n      })}\r\n    </div>\r\n  )\r\n};\r\n","import React from \"react\";\r\n\r\nexport default props => {\r\n  const style = {\r\n    left:`${props.dot[0]}%`,\r\n    top:`${props.dot[1]}%`,\r\n  }\r\n  return <div className=\"snake-food\" style={style}> </div>;\r\n};\r\n","import React, { Component } from \"react\";\nimport Snake from \"./Snake\";\nimport Food from \"./Food\";\nimport Gameover from \"./Gameover\";\nimport Startgame from \"./Startgame\";\n\nconst getRandomCoordinats = () => {\n  let min = 1;\n  let max = 98;\n  let x = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2;\n  let y = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2;\n  return [x, y];\n};\n\nconst initialState = {\n  food: getRandomCoordinats(),\n  speed: 200,\n  direction: \"RIGHT\",\n  snakeDots: [[0, 0], [2, 0]]\n};\n\nclass App extends Component {\n  state = initialState;\n\n  componentDidMount() {\n    setInterval(this.moveSnake, this.state.speed);\n    document.onkeydown = this.onKeyDown;\n  }\n\n  componentDidUpdate() {\n    this.checkIfOutOfBorders();\n    this.checkIfColapsed();\n    this.checkIfEat();\n  }\n\n  \n\n  onKeyDown = e => {\n    e = e || window.event;\n    switch (e.keyCode) {\n      case 38:\n        this.setState({ direction: \"UP\" });\n        break;\n      case 40:\n        this.setState({ direction: \"DOWN\" });\n        break;\n      case 37:\n        this.setState({ direction: \"LEFT\" });\n        break;\n      case 39:\n        this.setState({ direction: \"RIGHT\" });\n        break;\n      case 32:\n        this.setState(initialState);\n        break;\n      default:\n        break;\n    }\n  };\n\n  moveSnake = () => {\n    let dots = [...this.state.snakeDots];\n    let head = dots[dots.length - 1];\n\n    switch (this.state.direction) {\n      case \"RIGHT\":\n        head = [head[0] + 2, head[1]];\n        break;\n      case \"LEFT\":\n        head = [head[0] - 2, head[1]];\n        break;\n      case \"UP\":\n        head = [head[0], head[1] - 2];\n        break;\n      case \"DOWN\":\n        head = [head[0], head[1] + 2];\n        break;\n\n      default:\n        break;\n    }\n    dots.push(head);\n    dots.shift();\n    this.setState({\n      snakeDots: dots\n    });\n  };\n\n  checkIfOutOfBorders() {\n    let head = this.state.snakeDots[this.state.snakeDots.length - 1];\n    if (head[0] >= 100 || head[1] >= 100 || head[0] < 0 || head[1] < 0) {\n      this.onGameOver();\n    }\n  }\n\n  checkIfColapsed() {\n    let snake = [...this.state.snakeDots];\n    let head = snake[snake.length - 1];\n    snake.pop();\n    snake.forEach(dot => {\n      if (head[0] === dot[0] && head[1] === dot[1]) {\n        this.onGameOver();\n      }\n    });\n  }\n\n  checkIfEat() {\n    let head = this.state.snakeDots[this.state.snakeDots.length - 1];\n    let food = this.state.food;\n    if (head[0] === food[0] && head[1] === food[1]) {\n      this.setState({\n        food: getRandomCoordinats()\n      });\n      this.enlargeSnake();\n      this.increaseSpeed();\n    }\n  }\n\n  enlargeSnake() {\n    let newSnake = [...this.state.snakeDots];\n    newSnake.unshift([]);\n    this.setState({\n      snakeDots: newSnake\n    });\n  }\n\n  increaseSpeed() {\n    if (this.state.speed > 10) {\n      this.setState({\n        speed: this.state.speed - 10\n      });\n    }\n  }\n\n  onGameOver() {\n    alert(`GAME OVER! You eat ${this.state.snakeDots.length} apples`);\n    this.setState(initialState);\n  }\n\n  render() {\n    return (\n      <div className=\"game-area\">\n        {/* <Startgame /> */}\n        <Snake snakeDots={this.state.snakeDots} />\n        <Food dot={this.state.food} />\n       {/* <Gameover snakeDots={this.state.snakeDots}/>  */}\n        {/* {this.initialState && <Gameover snakeDots={this.state.snakeDots}/> } */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}